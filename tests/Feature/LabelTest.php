<?php

namespace Tests\Feature;

use App\Models\Label;
use Illuminate\Contracts\Auth\Authenticatable;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Laravel\Sanctum\HasApiTokens;
use Tests\TestCase;

class LabelTest extends TestCase
{
    use RefreshDatabase;

    private Authenticatable|HasApiTokens $user;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user = $this->authUser();
    }

    public function test_user_can_create_new_label()
    {
        $label            = Label::factory()->raw();
        $label['user_id'] = $this->user->id;

        $response = $this->postJson(route('label.store'), $label)->assertCreated();

        $this->assertDatabaseHas('labels', $label);
    }

    public function test_user_can_delete_a_label()
    {
        $label = $this->createLabel();

        $response = $this->deleteJson(route('label.destroy', $label->id))->assertNoContent();

        $this->assertDatabaseMissing('labels', $label->toArray());
    }

    public function test_user_can_update_a_label()
    {
        $label        = $this->createLabel();
        $updatedLabel = [
            'title' => 'Home',
            'color' => 'Green',
        ];

        $response = $this->patchJson(route('label.update', $label->id), $updatedLabel)->assertOk();

        $this->assertDatabaseHas('labels', $updatedLabel);
    }

    public function test_fetch_all_label_for_a_user()
    {
        $label = $this->createLabel(['user_id' => $this->user->id]);

        $response = $this->getJson(route('label.index'))->assertOk();

        $this->assertEquals($response[0]['title'], $label->title);
    }
}
